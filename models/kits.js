// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Kits = sequelize.define('kits', {
    name: {
      type: DataTypes.STRING,
    },
    stock: {
      type: DataTypes.INTEGER,
    },
    price: {
      type: DataTypes.INTEGER,
    },
    size: {
      type: DataTypes.INTEGER,
    },
    preparationTime: {
      type: DataTypes.STRING,
    },
    image: {
      type: DataTypes.STRING,
    },
    description: {
      type: DataTypes.STRING,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
    priority: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
    },
    tags: {
      type: DataTypes.STRING,
      defaultValue: "",
    },
    difficulty: {
      type: DataTypes.STRING,
      defaultValue: "",
    },
  }, {
    tableName: 'kits',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Kits.associate = (models) => {
    Kits.belongsTo(models.restaurants, {
      foreignKey: {
        name: 'restaurantIdKey',
        field: 'restaurant_id',
      },
      as: 'restaurant',
    });
    Kits.belongsToMany(models.cookwares, {
      through: 'kit_cookwares',
      foreignKey: 'kit_id',
      otherKey: 'cookware_id',
    });
    Kits.belongsToMany(models.categories, {
      through: 'kit_categories',
      foreignKey: 'kit_id',
      otherKey: 'category_id',
    });
    Kits.belongsToMany(models.users, {
      through: 'favourites',
      foreignKey: 'kit_id',
      otherKey: 'user_id',
    });
    Kits.hasMany(models.guides, {
      foreignKey: {
        name: 'kitIdKey',
        field: 'kit_id',
      },
      as: 'guides',
    });
    Kits.hasMany(models.kitIngredients, {
      foreignKey: {
        name: 'kitIdKey',
        field: 'kit_id',
      },
      as: 'kitIngredients',
    });
    Kits.hasMany(models.orders, {
      foreignKey: {
        name: 'kitIdKey',
        field: 'kit_id',
      },
      as: 'orders',
    });
  };

  return Kits;
};
